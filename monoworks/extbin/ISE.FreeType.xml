<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ISE.FreeType</name>
    </assembly>
    <members>
        <member name="T:ISE.FTGlyphOffset">
            <summary>
            Glyph offset information for advanced rendering and/or conversions.
            </summary>
        </member>
        <member name="F:ISE.FTGlyphOffset.width">
            <summary>
            Width of the Glyph, in pixels.
            </summary>
        </member>
        <member name="F:ISE.FTGlyphOffset.height">
            <summary>
            height of the Glyph, in pixels. Represents the number of scanlines
            </summary>
        </member>
        <member name="F:ISE.FTGlyphOffset.top">
            <summary>
            For Bitmap-generated fonts, this is the top-bearing expressed in integer pixels.
            This is the distance from the baseline to the topmost Glyph scanline, upwards Y being positive.
            </summary>
        </member>
        <member name="F:ISE.FTGlyphOffset.left">
            <summary>
            For Bitmap-generated fonts, this is the left-bearing expressed in integer pixels
            </summary>
        </member>
        <member name="F:ISE.FTGlyphOffset.advance">
            <summary>
            This is the transformed advance width for the glyph.
            </summary>
        </member>
        <member name="F:ISE.FTGlyphOffset.lsb_delta">
            <summary>
            The difference between hinted and unhinted left side bearing while autohinting is active. 0 otherwise.
            </summary>
        </member>
        <member name="F:ISE.FTGlyphOffset.rsb_delta">
            <summary>
            The difference between hinted and unhinted right side bearing while autohinting is active. 0 otherwise.
            </summary>
        </member>
        <member name="F:ISE.FTGlyphOffset.linearHoriAdvance">
            <summary>
            The advance width of the unhinted glyph. Its value is expressed in 16.16 fractional pixels, unless FT_LOAD_LINEAR_DESIGN is set when loading the glyph. This field can be important to perform correct WYSIWYG layout. Only relevant for outline glyphs.
            </summary>
        </member>
        <member name="F:ISE.FTGlyphOffset.linearVertAdvance">
            <summary>
            The advance height of the unhinted glyph. Its value is expressed in 16.16 fractional pixels, unless FT_LOAD_LINEAR_DESIGN is set when loading the glyph. This field can be important to perform correct WYSIWYG layout. Only relevant for outline glyphs.
            </summary>
        </member>
        <member name="T:ISE.FTFontType">
            <summary>
            For internal use, to represent the type of conversion to apply to the font
            </summary>
        </member>
        <member name="F:ISE.FTFontType.FT_NotInitialised">
            <summary>
            Font has not been initialised yet
            </summary>
        </member>
        <member name="F:ISE.FTFontType.FT_Texture">
            <summary>
            Font was converted to a series of Textures
            </summary>
        </member>
        <member name="F:ISE.FTFontType.FT_TextureMap">
            <summary>
            Font was converted to a big texture map, representing a collection of glyphs
            </summary>
        </member>
        <member name="F:ISE.FTFontType.FT_Outline">
            <summary>
            Font was converted to outlines and stored as display lists
            </summary>
        </member>
        <member name="F:ISE.FTFontType.FT_OutlineVBO">
            <summary>
            Font was convered to Outliens and stored as Vertex Buffer Objects
            </summary>
        </member>
        <member name="T:ISE.FTFontAlign">
            <summary>
            Alignment of output text
            </summary> 
        </member>
        <member name="F:ISE.FTFontAlign.FT_ALIGN_LEFT">
            <summary>
            Left-align the text when it is drawn
            </summary>
        </member>
        <member name="F:ISE.FTFontAlign.FT_ALIGN_CENTERED">
            <summary>
            Center-align the text when it is drawn
            </summary>
        </member>
        <member name="F:ISE.FTFontAlign.FT_ALIGN_RIGHT">
            <summary>
            Right-align the text when it is drawn
            </summary>
        </member>
        <member name="T:ISE.FTFont">
            <summary>
            Font class wraper for displaying FreeType fonts in OpenGL.
            </summary>
        </member>
        <member name="M:ISE.FTFont.ftInit">
            <summary>
            Initialise the FreeType library
            </summary>
            <returns></returns>
        </member>
        <member name="F:ISE.FTFont.FT_ALIGN">
            <summary>
            Font alignment public parameter
            </summary>		
        </member>
        <member name="M:ISE.FTFont.#ctor(System.String,System.Int32@)">
            <summary>
            Initialise the Font. Will Initialise the freetype library if not already done so
            </summary>
            <param name="resourcefilename">Path to the external font file</param>
            <param name="Success">Returns 0 if successful</param>
        </member>
        <member name="M:ISE.FTFont.ftVersion(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Return the version information for FreeType.
            </summary>
            <param name="Major">Major Version</param>
            <param name="Minor">Minor Version</param>
            <param name="Patch">Patch Number</param>
        </member>
        <member name="M:ISE.FTFont.ftVersionString">
            <summary>
            Return the entire version information for FreeType as a String.
            </summary>
            <returns></returns>
        </member>
        <member name="M:ISE.FTFont.ftRenderToTexture(System.Int32,System.UInt32)">
            <summary>
            Render the font to a series of OpenGL textures (one per letter)
            </summary>
            <param name="fontsize">size of the font</param>
            <param name="DPI">dots-per-inch setting</param>
        </member>
        <member name="M:ISE.FTFont.Dispose">
            <summary>
            Dispose of the font
            </summary>
        </member>
        <member name="M:ISE.FTFont.DisposeFreeType">
            <summary>
            Dispose of the FreeType library
            </summary>
        </member>
        <member name="M:ISE.FTFont.ftClearFont">
            <summary>
            Clear all OpenGL-related structures.
            </summary>
        </member>
        <member name="M:ISE.FTFont.ftExtent(System.String@)">
            <summary>
            Return the horizontal extent (width),in pixels, of a given font string
            </summary>
            <param name="text"></param>
            <returns></returns>
        </member>
        <member name="M:ISE.FTFont.ftGetGlyphOffset(System.Char)">
            <summary>
            Return the Glyph offsets for the first character in "text"
            </summary>
        </member>
        <member name="M:ISE.FTFont.ftBeginFont">
            <summary>
            Initialise the OpenGL state necessary fo rendering the font properly
            </summary>
        </member>
        <member name="M:ISE.FTFont.ftWrite(System.String)">
            <summary>
                Custom GL "write" routine.
            </summary>
            <param name="text">
                The text to print.
            </param>
        </member>
        <member name="M:ISE.FTFont.ftEndFont">
            <summary>
            Restore the OpenGL state to what it was prior
            to starting to draw the font
            </summary>
        </member>
    </members>
</doc>
